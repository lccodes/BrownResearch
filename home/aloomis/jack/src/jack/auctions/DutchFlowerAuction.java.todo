/**
 * @author TJ Goff  goff.tom@gmail.com
 * @version 1.0.0
 *
 * This library is free software; you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License version 2.1 as published by the
 * Free Software Foundation
 *
 *
 */

package jack.auctions;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Calendar;
import java.util.Random;
import java.util.Vector;

import jack.clients.DFA_Client_averager;
import jack.server.*;

public class DutchFlowerAuction implements Auction
{
    private Vector<ComThread> threads;//threads that communicate with clients
    private int[] costs;//track amount paid by each client
    private Vector<int[]> flowers;//store each client's flowers
    private Vector< Vector<FlowerContract> > contracts;//stores the client's available contracts
    long responseTime = 10000;//wait time (in ms) for clients to respond (default= 10s)
    Vector<String> purchases = new Vector<String>();//store records of purchass: "ID good cost"


    /**
     * Constructor (requires list of ComThreads to clients
     * @param threads Vector of ComThread objects that communicate with clients.
     */
    public DutchFlowerAuction(Vector<ComThread> threads){
        this.threads = threads;

        //int[]'s start with default values of 0
        this.costs = new int[threads.size()];//Clients start with 0 costs

        this.flowers = new Vector<int[]>();//Clients start with 0 flowers
        for (int i=0; i < threads.size(); i++) {
            flowers.add( new int[3] );//roses, tulips, lillies
        }
        //Each client can have multiple FlowerContracts that they can fulfill
        //Store the FlowerContracts here in each Client's respective index
        this.contracts = new Vector< Vector<FlowerContract> >();
        //fill the outer Vector with empty inner Vectors
        for (int i=0; i < threads.size(); i++) {
            contracts.add(new Vector<FlowerContract>() );
        }
    }

    /**
     * Import a Vector of threads used to communicate with clients
     * @param threads Vector of ComThread objects that communicate with clients.
     */
    public void setComThreads(Vector<ComThread> threads) {
        this.threads = threads;

        //Clients start with 0 costs & flowers
        this.costs = new int[threads.size()];//adjust size of costs & flowers

        this.flowers = new Vector<int[]>();
        for(int i=0; i < threads.size(); i++) {
            flowers.add( new int[3] );
        }
        //This clears any existing contracts and resizes outer vector as needed
        this.contracts = new Vector< Vector<FlowerContract> >();
        for (int i=0; i < threads.size(); i++) {
            this.contracts.add( new Vector<FlowerContract>() );
        }
    }


    /**
     * Run the entire auction, and record the outcome
     */
    public void run(){
        System.out.println("Call to DutchFlowerAuction.run()");

        //Randomly generate orders that clients must fulfill for rewards
        int contractsPerClient = 6;
        Random rand = new Random();
        Vector<FlowerContract> fContracts = new Vector<FlowerContract>();
        for (int i = 0; i < contractsPerClient*threads.size(); i++) {
            int numRoses = rand.nextInt(10);//random number 0-9 of flowers needed
            int numTulips = rand.nextInt(10);
            int numLillies = rand.nextInt(10);

            //based on number of flowers of each type, assign a random value
            int currValue = numRoses*(rand.nextInt(10)+20) + //20-30 points per rose
                            numTulips*(rand.nextInt(10)+15) + //15-25 points per Tulip
                            numLillies*(rand.nextInt(10)+10); //10-20 points per Lilly
            fContracts.add(new FlowerContract(numRoses, numTulips, numLillies, currValue));
        }

        System.out.println("Testing generation of FlowerContracts");
        System.out.println("R T L Value");
        for (int i=0; i < fContracts.size(); i++) {
            System.out.println( fContracts.get(i).toString() );
        }

        //Give each client an equal number of FlowerContracts that they can fulfill
        while (!fContracts.isEmpty()) {
            //assign one random contract to each client (remove after each assignment)
            for (int i=0; i < contracts.size(); i++) {
                contracts.get(i).add( fContracts.remove(0));
            }
        }
        System.out.println("\nAll contracts have been assigned!\n");

        //Communicate all orders to clients
        int i, j;
        for (i=0; i < contracts.size(); i++) {
            for (j=0; j < contracts.get(i).size(); j++) {
                System.out.println("Sending a contract..." + contracts.get(i).get(j).toString());
                //wait for a response
                threads.get(i).setClientMsg("");
                threads.get(i).setServerMsg("Add_Contract " +
                                            contracts.get(i).get(j).toString());
                //wait for client to respond
                while (threads.get(i).getClientMsg().isEmpty()) {
                    //waiting...
                }
            }
        }
        //All contracts, with valuations, have been sent to clients!
        System.out.println("All FlowerContracts have been sent to clients!");


        //Some params for the DFA
        int numSched = 2;
        int numLots = 6;
        int lotSize = 10;

        //Create schedules of the flowers to be sold, using params
        Vector<AuctionSchedule> schedules = new Vector<AuctionSchedule>();

        for (i=0; i < numSched; i++) {
            String currId = "Schedule_" + i;

            Vector<FlowerLot> currLots = new Vector<FlowerLot>();

            //FlowerLot(String type, int num, String id, int price, int reserve)
            //Generate several lots of flowers, which can be sold in pieces
            for (j=0; j < numLots; j++) {
                String currType = "roses";//ensure even distribution of types
                if(j%3 == 1)
                    currType = "tulips";
                else if(j%3 == 2)
                    currType = "lillies";

                ////start price always 40, reserve always 4... for now
                currLots.add(new FlowerLot(currType, lotSize, "Lot_"+i +"."+j , 40, 4));
            }

            //record the new schedule we just defined
            AuctionSchedule curr = new AuctionSchedule(currId, currLots);
            schedules.add( curr  );

            //Inform the clients about this new schedule
            String msg = "Add_Schedule";
            for (j=0; j < curr.myLots.size(); j++) {
                msg = msg + " " + curr.myLots.get(j).type +
                            " " + curr.myLots.get(j).count +
                            " " + curr.myLots.get(j).lotID +
                            " " + curr.myLots.get(j).startPrice +
                            " " + curr.myLots.get(j).reservePrice;
            }
            //send the contructed message
            TestServer.sendToAllClients(threads, msg);
            TestServer.waitForAllResponses(threads, 5000, "0");
        }
        System.out.println("\nSchedules have been sent to clients!\n");


        //For each schedule, create a separate AuctionScheduleRunner thread and start it.
        //Each AuctionScheduleRunner will run its own schedule asynchronously from the
        //others.  It's up to agents to keep up with the state of each schedule reported
        //by the respective AuctionScheduleRunner.

        Vector<AuctionScheduleRunner> runners = new Vector<AuctionScheduleRunner>();
        for (i=0; i < schedules.size(); i++) {
            AuctionScheduleRunner currRunner = new AuctionScheduleRunner(schedules.get(i), threads, costs, flowers);
            runners.add(currRunner);
            currRunner.start();
        }


        System.out.println("Press Enter to end...");
        try {
            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
            stdIn.readLine();
        } catch(Exception e) {

        }

        /*
        //Auction off all FlowerLots in the schedule
        while( !schedule_0.isEmpty() ){
            //sell all flowers in the current FlowerLot (at index 0)
            while( schedule_0.get(0).count > 0 ){
                //Send state info
                AuctionServer.sendToAllClients(threads, "Auction_Prepare" +
                                                        " " + schedule_0.get(0).lotID +
                                                        " " + schedule_0.get(0).type +
                                                        " " + schedule_0.get(0).count +
                                                        " " + schedule_0.get(0).startPrice);
                AuctionServer.waitForAllResponses(threads, 3000, "ready");
                AuctionServer.clearAllMsgs(threads);

                //collect bids
                AuctionServer.sendToAllClients(threads, "Enter_Bids");
                AuctionServer.waitForAllResponses(threads, 60000, "0 0");

                //bids are in form "bid quantity"
                int[] bids = new int[threads.size()];
                int[] quantities = new int[threads.size()];
                int maxBid = -1;
                for(i=0; i < threads.size(); i++){
                    String[] parts = threads.get(i).getClientMsg().split(" ");
                    bids[i] = Integer.parseInt(parts[0]);
                    quantities[i] = Integer.parseInt(parts[1]);
                    if(bids[i] > maxBid)
                        maxBid = bids[i];
                }

                //determine winner(s)
                Vector<ComThread> winners = new Vector<ComThread>();
                for(i=0; i < threads.size(); i++)
                    if( maxBid > 0 && maxBid == bids[i] )
                        winners.add( threads.get(i) );
                //randomly narrow down to 1 winner
                while( winners.size() > 1)
                    winners.remove( rand.nextInt(winners.size()) );


                //Find winner (if any), else remove all remaining flowers from Lot
                System.out.println("Bids are:");
                for(i=0; i < threads.size(); i++)
                    System.out.println(threads.get(i).getClientID() + ": " +
                                       threads.get(i).getClientMsg());


                if(maxBid > 0){
                    String[] parts = winners.get(0).getClientMsg().split(" "); //bid quantity
                    System.out.println("Winner: " + winners.get(0).getClientID());
                    System.out.println("Price per flower: " + parts[0]);
                    System.out.println("Quantity of " + schedule_0.get(0).type + " = " + parts[1]);
                    schedule_0.get(0).count -= Integer.parseInt(parts[1]);
                }

                else{
                    System.out.println("No winner.  All remaining flowers in Lot are destroyed");
                    schedule_0.get(0).count = 0;//remove all remaining flowers!
                }
            }
            schedule_0.remove(0);//remove the empty FlowerLot
        }*/
        //All flowers in schedule_0 have been sold or destroyed

        System.out.println("DutchFlowerAuction is over");
    }//end run()



    public String getDescription() {
        // TODO Auto-generated method stub
        return null;
    }


    public Vector<String> getFinalResult() {
        // TODO Auto-generated method stub
        return null;
    }


    public void resolveAuction() {
        // TODO Auto-generated method stub

    }


    public void runAuction() {
        // TODO Auto-generated method stub

    }


    public Vector<String> runFullAuction() {
        // TODO Auto-generated method stub
        return null;
    }


    public void setupAuction() {
        // TODO Auto-generated method stub

    }

}//end DutchFlowerAuction




////////////////////////////////////////////////////////
//Class used for parsing and organizing flower contracts
////////////////////////////////////////////////////////
class FlowerContract
{
    //Types of flowers needed to fulfill the contract
    public int roses;
    public int tulips;
    public int lillies;
    public int value;

    public FlowerContract(int r, int t, int l, int v){
        this.roses = r;
        this.tulips = t;
        this.lillies = l;
        this.value = v;
    }

    /**
     * return a String encoding of this FlowerContract. Spaces are delimiters.
     */
    public String toString(){
        return  Integer.toString(roses)+ " " +
                Integer.toString(tulips)+ " " +
                Integer.toString(lillies)+ " " +
                Integer.toString(value);
    }

    /**
     * Given a string encoding of a FlowerContract, reconstruct the original.
     * @param str String encoding a FlowerContract.
     */
    public void setFromString(String str){
        String[] parts = str.split(" ");
        //for now, assume str is always properly formatted
        roses = Integer.parseInt(parts[0]);
        tulips = Integer.parseInt(parts[1]);
        lillies = Integer.parseInt(parts[2]);
        value = Integer.parseInt(parts[3]);
    }

}


/**
 * Wrapper class for organizing Flowers into lots
 */
class FlowerLot
{
    public String lotID;
    public int count;
    public String type;
    public int startPrice;
    public int reservePrice;

    public FlowerLot(String type, int num, String id, int price, int reserve){
        this.count = num;
        this.type = type;
        this.lotID = id;
        this.startPrice = price;
        this.reservePrice = reserve;
    }

    //if this lot has at least 'num' flowers, remove that many
    public boolean sell(int num){
        if(count >= num){
            count = count - num;
            return true;
        }
        return false;
    }

}

/**
 * An AuctionSchedule contains several FlowerLots which will be auctioned
 * off in sequence.
 */
class AuctionSchedule
{
    public String scheduleID;
    //tracks the FlowerLots that will be auctioned in sequence
    public Vector<FlowerLot> myLots = new Vector<FlowerLot>();
    //tracks current price per unit in current FlowerLot. Decreases over time.
    public int currPrice;

    public AuctionSchedule(String id, Vector<FlowerLot> sched){
        this.scheduleID = id;

        //copy FlowerLots from "sched" to "myLots"
        for(int i=0; i < sched.size(); i++)
            myLots.add(sched.get(i));
    }

}


/**
 * A thread which auctions off each FlowerLot in an AuctionSchedule.  Several
 * AuctionSchedules can be run at the same time using these parallel threads.
 */
class AuctionScheduleRunner extends Thread
{
    private AuctionSchedule mySchedule;
    private Vector<ComThread> threads;
    int[] costs;
    Vector<int[]> flowers;

    public AuctionScheduleRunner(AuctionSchedule sched, Vector<ComThread> threads,
                                int[] costs, Vector<int[]> flowers){
        super("AuctionScheduleRunner"); //call superclass constructor: Thread(String name)
        mySchedule = sched;
        this.threads = threads;
        this.costs = costs;
        this.flowers = flowers;
    }


    /**
     * run a DFA auction for the schedule provided!
     */
    public void run() {
        String tmp;//used to prevent race conditions
        //Auction off all FlowerLots in the schedule
        while( !mySchedule.myLots.isEmpty() ){
            //Send state info
            TestServer.sendToAllClients(threads, "Auction_Prepare" +
                                                " " + mySchedule.scheduleID +
                                                " " + mySchedule.myLots.get(0).lotID +
                                                " " + mySchedule.myLots.get(0).type +
                                                " " + mySchedule.myLots.get(0).count +
                                                " " + mySchedule.myLots.get(0).startPrice +
                                                " " + mySchedule.myLots.get(0).reservePrice);
            TestServer.waitForAllResponses(threads, 3000, "ready");

            int startPrice = mySchedule.myLots.get(0).startPrice;
            int currPrice = startPrice;
            long timeStamp = Calendar.getInstance().getTimeInMillis();
            //sell all flowers in the current FlowerLot (at index 0)
            while( mySchedule.myLots.get(0).count > 0 ){
                boolean purchase = false;//set to true if there's a purchase to raise the price

                //check to see if any clients have winning bids for this Lot
                for(int i=0; i < threads.size(); i++){
                    if ((tmp=threads.get(i).getClientMsg()).startsWith(mySchedule.scheduleID)
                            && tmp.contains(mySchedule.myLots.get(0).lotID) ) {
                        //check to see if bid valid
                        String[] parts = tmp.split(" ");
                        //parts = [scheduleID, LotID, bidAmount, quantity]

                        //If bid high enough, complete transaction
                        if (Integer.parseInt(parts[2]) >= currPrice) {
                            //int[] costs
                            //vectr<int[]> flowers
                            //can't buy more flowers than are left
                            int numBuy = Math.min(Integer.parseInt(parts[3]), mySchedule.myLots.get(0).count);
                            int orderCost = numBuy * Integer.parseInt(parts[2]);

                            mySchedule.myLots.get(0).count = mySchedule.myLots.get(0).count - numBuy;

                            //Record costs and Flowers won
                            costs[i] = costs[i] + orderCost;
                            int typeIndex = 0;//for roses...
                            if( mySchedule.myLots.get(0).type.equalsIgnoreCase("tulips") )
                                typeIndex = 1;
                            else if( mySchedule.myLots.get(0).type.equalsIgnoreCase("lillies") )
                                typeIndex = 2;
                            flowers.get(i)[typeIndex] = flowers.get(i)[typeIndex] + numBuy;

                            //Report the purchase to clients
                            String report = "Agent ["+threads.get(i).getClientID()+"] bought [" +
                                            numBuy + "] [" + mySchedule.myLots.get(0).type +
                                            "] for [" + orderCost + "]";
                            TestServer.sendToAllClients(threads, report);
                            System.out.println(report);
                            purchase = true;
                            break;
                        }
                    }
                }//end check each thread for winning bid


                //if a purchase was made, reset the price by 19 increments and reset timestamp
                if(purchase){
                    startPrice = currPrice + 19;
                    for(int i=0; i < 100000; i--)/// buy a little time for agents to register purchase
                        i+=2;

                    currPrice = startPrice;
                    timeStamp = Calendar.getInstance().getTimeInMillis();
                    //report auction state to clients
                    TestServer.sendToAllClients(threads, "Auction_State" +
                             " " + mySchedule.scheduleID +
                             " " + mySchedule.myLots.get(0).lotID +
                             " " + mySchedule.myLots.get(0).type +
                             " " + mySchedule.myLots.get(0).count +
                             " " + currPrice +
                             " " + mySchedule.myLots.get(0).reservePrice);
                }
                //Else, check if currPrice needs to be updated, and report to clients if so
                else if( currPrice !=
                    (startPrice - (int)(Calendar.getInstance().getTimeInMillis()-timeStamp)/1000) ){

                    currPrice = startPrice -
                           (int)((Calendar.getInstance().getTimeInMillis()-timeStamp)/1000);
                    //report auction state to clients
                    TestServer.sendToAllClients(threads, "Auction_State" +
                             " " + mySchedule.scheduleID +
                             " " + mySchedule.myLots.get(0).lotID +
                             " " + mySchedule.myLots.get(0).type +
                             " " + mySchedule.myLots.get(0).count +
                             " " + currPrice +
                             " " + mySchedule.myLots.get(0).reservePrice);
                }

                //if passed the reserve price, destroy all remaining flowers in the Lot
                if( currPrice < mySchedule.myLots.get(0).reservePrice){
                     mySchedule.myLots.get(0).count = 0;
                }
            }//end Lot auction
            //mySchedule.myLots.get(0) is complete, remove from schedule
            mySchedule.myLots.remove(0);
        }//end ALL Lot auctions in schedule
    }

}
