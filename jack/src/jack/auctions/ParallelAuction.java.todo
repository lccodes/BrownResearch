/**
 * @author TJ Goff  goff.tom@gmail.com
 * @version 1.0.0
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License version 2.1 as
 * published by the Free Software Foundation.
 *
 * A ParellelAuction contains sub-auctions, and starts a separate thread to run
 * each of the sub-auctions in parallel.  All of the sub-auctions will start at
 * essentially the same time, but they can end in any order. Clients will learn
 * about the results of some sub-auctions before others, depending on when they
 * are resolved.
 */

package jack.auctions;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Vector;

import jack.server.*;


public class ParallelAuction implements Auction
{
    Vector<ComThread> coms;//threads that communicate with clients
    Vector<ComThread> threads;//threads that communicate with clients
    Vector<Auction> auctions = new Vector<Auction>();//store sequence of auctons

    long responseTime = 10000;//wait time (in ms) for clients to respond (default= 10s)
    boolean fullResponseTime = false;

    String configFile = new String("Config_ParallelAuction.txt");//default config file
    Vector<String> purchases = new Vector<String>();//store purchass: "ID good cost"


    /**
     * Constructor
     * @param threads Vector of ComThread objects that communicate with clients.
     * @param configFile File specifying configuration values for the auction.
     */
    public ParallelAuction(Vector<ComThread> threads, String configFile){
        this.threads = threads;
        this.configFile = configFile;
    }

    /**
     * Constructor
     * @param threads Vector of ComThread objects that communicate with clients.
     */
    public ParallelAuction(Vector<ComThread> threads){
        this.threads = threads;
    }

    public void setComThreads(Vector<ComThread> coms) {
        this.coms = coms;
    }

    /**
     * Read in configuration file and setup the auction
     */
    public void setupAuction() {
        try {
            DataInputStream in = new DataInputStream(
                    new FileInputStream("src/auctions/"+configFile));
            BufferedReader br = new BufferedReader(new InputStreamReader(in));

            AuctionServer.writeToLogFile("\n\nImporting settings from "+configFile, 5);
            String currLine;
            while ((currLine = br.readLine()) != null) {
                if (currLine.isEmpty()) {
                    continue;//skip blank lines
                }
                //get auction type and configuration file name
                HashMap<String, String> currParams = AuctionServer.getParamValuePairs(currLine);
                //Create an auction and add it to queue
                auctions.add(AuctionServer.makeAuction(currParams.get("Auction_Type"),
                        threads, currParams.get("Config_File")));
            }
            in.close();//Close the input stream
        } catch (Exception e) {//Catch exception if any
              System.err.println("Error: " + e.getMessage());
        }
        System.out.println("All auctions have been created");

        //First phase of each auction: setupAuction()
        //record schedule of auctions
        String schedule = "Auction Schedule...";
        for (int i=0; i < auctions.size(); i++) {
            if (auctions.get(i).getClass().equals( FirstPriceAuction.class )) {
                ((FirstPriceAuction)auctions.get(i)).setupAuction();
                schedule = schedule + ".   FirstPriceAuction for: " +
                           ((FirstPriceAuction)auctions.get(i)).good + ". Reserve Price: " +
                           ((FirstPriceAuction)auctions.get(i)).reservePrice;
            } else if( auctions.get(i).getClass().equals( SecondPriceAuction.class )) {
                ((SecondPriceAuction)auctions.get(i)).setupAuction();
                schedule = schedule + ".   SecondPriceAuction for: " +
                   ((SecondPriceAuction)auctions.get(i)).good + ". Reserve Price: " +
                   ((SecondPriceAuction)auctions.get(i)).reservePrice;
            } else if( auctions.get(i).getClass().equals( SequentialAuction.class )) {
                ((SequentialAuction)auctions.get(i)).setupAuction();
                schedule = schedule + ".   SequentialAuction[" +
                ((SequentialAuction)auctions.get(i)).auctions.size() +    "]";
            }
            //handle more types here...
        }
        //Send auction schedule to clients
        System.out.println(schedule);
        AuctionServer.sendToAllWaitForResponses(threads, schedule, 10000, false, "0");
    }

    @Override
    public void runAuction() {
        // TODO Auto-generated method stub

    }

    @Override
    public void resolveAuction() {
        // TODO Auto-generated method stub

    }

    @Override
    public Vector<String> getFinalResult() {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * Run the entire auction, and record the outcome
     */
    public Vector<String> runFullAuction() {
        setupAuction();
        runAuction();
        resolveAuction();
        return getFinalResult();
    }

    /**
     * Return a String encoding information about the auction, including sub-auctions
     */
    public String getDescription() {
        String desc = "ParallelAuction [";
        for(int i=0; i < auctions.size(); i++) {
            desc = desc + " " +auctions.get(i).getDescription();
        }
        desc = desc + " ]";
        return desc;
    }


    /**
     * An AuctionRunner is a Thread created specifically to run one of the
     * ParallelAuction's sub-auctions.
     */
    private class AuctionRunner extends Thread
    {
        Auction auct;

        public AuctionRunner(Auction auct){
            this.auct = auct;
        }

        public void run() {
            auct.runFullAuction();
        }
    }

}
